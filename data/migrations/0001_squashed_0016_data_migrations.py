# Generated by Django 3.2.8 on 2021-11-26 20:38

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    replaces = [
        ('data', '0001_initial'),
        ('data', '0003_add_wbc_percentage_fields_to_data'),
        ('data', '0004_add_hemogramfields_alter_names_and_validators'),
        ('data', '0005_auto_update_fields'),
        ('data', '0006_example_data'),
        ('data', '0007_example_data_enable_cift'),
        ('data', '0008_example_data_enable_introspection'),
        ('data', '0009_data_is_finished'),
        ('data', '0010_example_data_mark_as_finished'),
        ('data', '0011_data_chtuid'),
        ('data', '0012_data_alter_is_covid19'),
        ('data', '0013_data_alter_uuid'),
        ('data', '0014_example_data_fix'),
        ('data', '0015_example_data_auth_token'),
        ('data', '0016_data_rename_mnl_Upercentace_Rwbc')
    ]

    initial = True

    dependencies = [
        ('supervised_learning', '0009_hgbtreeimputer'),
        ('sessions', '0001_initial'),
        ('units', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('ai_base', '0002_learningtechnique_cift_is_enabled'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('supervised_learning', '0007_rename_hgbtree_to_hgbtreeclassifier'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('admin', '0003_logentry_add_action_flag_choices'),
    ]

    operations = [
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.AutoField(
                    auto_created=True, primary_key=True, serialize=False,
                    verbose_name='ID')),
                ('unit_ii', models.CharField(
                    blank=True,
                    help_text=('Unit Internal Identifier for mapping to '
                               'physical record'),
                    max_length=50, null=True,
                    verbose_name='Unit Internal Identifier')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('timestamp', models.DateTimeField(
                    default=django.utils.timezone.now,
                    verbose_name='Timestamp')),
                ('is_covid19', models.BooleanField(
                    verbose_name='Is COVID19?')),
                ('age', models.PositiveSmallIntegerField(
                    blank=True, null=True, verbose_name='Age')),
                ('sex', models.BooleanField(
                    blank=True, choices=[
                        (None, 'Not Available'),
                        (False, 'Female'), (True, 'Male')
                    ], null=True, verbose_name='Sex')),
                ('is_diabetic', models.BooleanField(
                    null=True, verbose_name='Is Diabetic?')),
                ('is_hypertense', models.BooleanField(
                    null=True, verbose_name='Is Hypertense?')),
                ('is_overweight', models.BooleanField(
                    null=True, verbose_name='Is Overweight Patient?')),
                ('is_at_altitude', models.BooleanField(
                    help_text='Is the Patient at High Altitude (> 1500m)',
                    null=True, verbose_name='Is at Altitude?')),
                ('is_with_other_conds', models.BooleanField(
                    help_text=('Is the Patient with other Relevant '
                               'Conditions? (Transplantation, Blood '
                               'disorders, etc.)'),
                    null=True,
                    verbose_name='Is with other Relevant Conditions?')),
                ('rbc', models.DecimalField(
                    blank=True, decimal_places=3,
                    help_text='Red Blood Cells (x10^12/L or mlm/mm^3)',
                    max_digits=5, null=True,
                    validators=[django.core.validators.MinValueValidator(2.0),
                                django.core.validators.MaxValueValidator(8.0)],
                    verbose_name='RBC (x10^12/L)')),
                ('wbc', models.DecimalField(
                    blank=True, decimal_places=3,
                    help_text=('White Blood Cells (x10^12/L or x10^3/mm^3 or '
                               'x10^3/uL^3)'),
                    max_digits=5, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(1.0),
                        django.core.validators.MaxValueValidator(50.0)],
                    verbose_name='WBC (x10^9/L)')),
                ('hgb', models.SmallIntegerField(
                    blank=True, help_text='Hemoglobin (g/L)', null=True,
                    validators=[django.core.validators.MinValueValidator(50),
                                django.core.validators.MaxValueValidator(250)],
                    verbose_name='HGB (g/L)')),
                ('hct', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Hematocrit (g/L)', max_digits=3, null=True,
                    validators=[django.core.validators.MinValueValidator(0.1),
                                django.core.validators.MaxValueValidator(1)],
                    verbose_name='HCT (L/L)')),
                ('mcv', models.SmallIntegerField(
                    blank=True, help_text='Mean Cell Volume (fL)', null=True,
                    validators=[django.core.validators.MinValueValidator(50),
                                django.core.validators.MaxValueValidator(150)],
                    verbose_name='MCV (fL)')),
                ('mch', models.SmallIntegerField(
                    blank=True, help_text='Mean Cell Hemoglobin (pg/cell)',
                    null=True,
                    validators=[django.core.validators.MinValueValidator(10),
                                django.core.validators.MaxValueValidator(50)],
                    verbose_name='MCH (pg/cell)')),
                ('mchc', models.SmallIntegerField(
                    blank=True,
                    help_text=('Mean Corpuscular Hemoglobin '
                               'Concentration (g/L)'),
                    null=True,
                    validators=[django.core.validators.MinValueValidator(2), 
                                django.core.validators.MaxValueValidator(5)],
                    verbose_name='MCHC (g/L)')),
                ('rdw', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Red Blood Cell Distribution Width (%)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(5.0),
                        django.core.validators.MaxValueValidator(30.0)],
                    verbose_name='RDW (%)')),
                ('plt', models.SmallIntegerField(
                    blank=True, help_text='Platelets (x10^9/L or x1000/uL)',
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(50),
                        django.core.validators.MaxValueValidator(1000)],
                    verbose_name='PLT (x10^9/L)')),
                ('neut', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Neutrophil Granulocytes (x10^9/L)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.01),
                        django.core.validators.MaxValueValidator(30.0)],
                    verbose_name='NEUT (x10^9/L)')),
                ('lymp', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Lymphocytes (x10^9/L)', max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.01),
                        django.core.validators.MaxValueValidator(30.0)],
                    verbose_name='LYMPH (x10^9/L)')),
                ('mono', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Monocytes (x10^9/L)', max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.01),
                        django.core.validators.MaxValueValidator(30.0)],
                    verbose_name='MONO (x10^9/L)')),
                ('eo', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Eosinophils (x10^9/L)', max_digits=4,
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(10.0)],
                    verbose_name='EO (x10^9/L)')),
                ('baso', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Basophil Granulocytes (x10^9/L)', max_digits=4,
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(10.0)],
                    verbose_name='BASO (x10^9/L)')),
                ('iga', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Inmunoglobulines A (x10^9/L)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(1000.0)],
                    verbose_name='IGA (x10^9/L)')),
                ('igm', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Inmunoglobulines - M (x10^9/L)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(10.0),
                        django.core.validators.MaxValueValidator(400.0)],
                    verbose_name='IGM (x10^9/L)')),
                ('unit', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='data',
                    to='units.unit', verbose_name='Unit')),
                ('user', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='data',
                    to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('baso_Upercentage_Rwbc', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Basophil Granulocytes (% of White Blood Cells)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(99.0)],
                    verbose_name='BASO (% WBC)')),
                ('eo_Upercentage_Rwbc', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text=('Eosinophil Granulocytes '
                               '(% of White Blood Cells)'),
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(99.0)],
                    verbose_name='EO (% WBC)')),
                ('lymp_Upercentage_Rwbc', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Lymphocytes (% of White Blood Cells)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.01),
                        django.core.validators.MaxValueValidator(99.0)],
                    verbose_name='LYMPH (% WBC)')),
                ('mono_Upercentage_Rwbc', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Monocytes (% of White Blood Cells)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.01),
                        django.core.validators.MaxValueValidator(99.0)],
                    verbose_name='MONO (% WBC)')),
                ('neut_Upercentage_Rwbc', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text=('Neutrophil Granulocytes '
                               '(% of White Blood Cells)'),
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.01),
                        django.core.validators.MaxValueValidator(99.0)],
                    verbose_name='NEUT (% WBC)')),
                ('aat', models.SmallIntegerField(
                    blank=True, help_text='Alpha 1-antitrypsin (mg/dL)',
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(50),
                        django.core.validators.MaxValueValidator(500)],
                    verbose_name='AAT (mg/L)')),
                ('aat_UumolL', models.SmallIntegerField(
                    blank=True, help_text='Alpha 1-antitrypsin (umol/L)',
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(5),
                        django.core.validators.MaxValueValidator(150)],
                    verbose_name='AAT (umol/L)')),
                ('aptt', models.SmallIntegerField(
                    blank=True,
                    help_text='Activated Partial Thromboplastin Time (s)',
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(5),
                        django.core.validators.MaxValueValidator(120)],
                    verbose_name='APTT (s)')),
                ('atb', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Antithrombin (kIU/L)', max_digits=3, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.1),
                        django.core.validators.MaxValueValidator(4)],
                    verbose_name='ATB (kIU/L)')),
                ('atb_UmgmL', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Antithrombin (mg/mL)',
                    max_digits=3, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.1),
                        django.core.validators.MaxValueValidator(2)],
                    verbose_name='ATB (mg/mL)')),
                ('bt', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Bleeding Time (minutes)', max_digits=3,
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0),
                        django.core.validators.MaxValueValidator(20)],
                    verbose_name='BT (minutes)')),
                ('cd4', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='CD4+ T cells (x10^9/L)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(10.0)],
                    verbose_name='CD4 (x10^9/L)')),
                ('crp', models.SmallIntegerField(
                    blank=True, help_text='C Reactive Protein (mg/L)',
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0),
                        django.core.validators.MaxValueValidator(15)],
                    verbose_name='CRP (mg/L)')),
                ('crp_UnmolL', models.SmallIntegerField(
                    blank=True, help_text='C Reactive Protein (nmol/L)',
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0),
                        django.core.validators.MaxValueValidator(500)],
                    verbose_name='CRP (nmol/L)')),
                ('esr', models.SmallIntegerField(
                    blank=True,
                    help_text='Erythrocyte Sedimentation Rate (mm/H)',
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0),
                        django.core.validators.MaxValueValidator(200)],
                    verbose_name='ESR (mm/H)')),
                ('fbg', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Fibrogen (g/L)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.1),
                        django.core.validators.MaxValueValidator(9)],
                    verbose_name='FBG (g/L)')),
                ('hgb_UmmolL', models.DecimalField(
                    blank=True, decimal_places=3,
                    help_text='Hemoglobin (mmol/L)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.5),
                        django.core.validators.MaxValueValidator(4)],
                    verbose_name='HGB (mmol/L)')),
                ('hgbg', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Glycated Hemoglobin (% of Hemoglobin)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(1),
                        django.core.validators.MaxValueValidator(8)],
                    verbose_name='Glycated Hemoglobin (% of HGB)')),
                ('hgbp', models.SmallIntegerField(
                    blank=True,
                    help_text='Hemoglobin in Plasma (mg/dL)',
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.1),
                        django.core.validators.MaxValueValidator(8)],
                    verbose_name='HGBP (mg/dL)')),
                ('hgbp_UumolL', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Hemoglobin in Plasma (umol/L)',
                    max_digits=3, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.1),
                        django.core.validators.MaxValueValidator(2)],
                    verbose_name='HGBP (umol/L)')),
                ('htg', models.DecimalField(
                    blank=True, decimal_places=3,
                    help_text='Haptoglobin (g/L)', max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.1),
                        django.core.validators.MaxValueValidator(5)],
                    verbose_name='HTG (g/L)')),
                ('igd', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Inmunoglobulines D (x10^9/L)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(10.0)],
                    verbose_name='IGD (x10^9/L)')),
                ('ige', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Inmunoglobulines E (x10^9/L)', max_digits=4,
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(10.0)],
                    verbose_name='IGE (x10^9/L)')),
                ('igg', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Inmunoglobulines G (x10^9/L)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(100.0),
                        django.core.validators.MaxValueValidator(2500.0)],
                    verbose_name='IGG (x10^9/L)')),
                ('inr', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='International Normalized Ratio', max_digits=3,
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.1),
                        django.core.validators.MaxValueValidator(3)],
                    verbose_name='INR')),
                ('mch_Ufmolcell', models.SmallIntegerField(
                    blank=True,
                    help_text='Mean Cell Hemoglobin (fmol/cell)',
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.1),
                        django.core.validators.MaxValueValidator(2)],
                    verbose_name='MCH (fmol/cell)')),
                ('mchc_UgdL', models.SmallIntegerField(
                    blank=True,
                    help_text=('Mean Corpuscular Hemoglobin '
                               'Concentration (g/dL)'),
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(20),
                        django.core.validators.MaxValueValidator(50)],
                    verbose_name='MCHC (g/dL)')),
                ('mchc_UmmolL', models.SmallIntegerField(
                    blank=True,
                    help_text=('Mean Corpuscular Hemoglobin '
                               'Concentration (mmol/L)'),
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(2),
                        django.core.validators.MaxValueValidator(8)],
                    verbose_name='MCHC (mmol/L)')),
                ('mnl', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Mononuclear Leukocytes (x10^9/L)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.01),
                        django.core.validators.MaxValueValidator(20.0)],
                    verbose_name='MNL (x10^9/L)')),
                ('mnl_Upercentace_Rwbc', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text=('Mononuclear Leukocytes '
                               '(% of White Blood Cells)'),
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.01),
                        django.core.validators.MaxValueValidator(99.0)],
                    verbose_name='MNL (% WBC)')),
                ('mpv', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Mean Platelet Volume (fL)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(1),
                        django.core.validators.MaxValueValidator(50)],
                    verbose_name='MPV (fL)')),
                ('nbf', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Neutrophilic Band Forms (x10^9/L)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(2)],
                    verbose_name='NBF (x10^9/L)')),
                ('nbf_Upercentage_Rwbc', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text=('Neutrophilic Band Forms '
                               '(% of White Blood Cells)'),
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.01),
                        django.core.validators.MaxValueValidator(99.0)],
                    verbose_name='NBF (% WBC)')),
                ('pct', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Procalcitonin (ng/dL or ug/L)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.01),
                        django.core.validators.MaxValueValidator(2.0)],
                    verbose_name='PCT (ng/dL)')),
                ('pt', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Prothrombin Time (s)', max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(50),
                        django.core.validators.MaxValueValidator(550)],
                    verbose_name='PT (s)')),
                ('rtc', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Reticulocytes (x10^9/L)',
                    max_digits=4, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(5.0),
                        django.core.validators.MaxValueValidator(250.0)],
                    verbose_name='Reticulocytes (x10^9/L)')),
                ('rtc_Upercentage_Rrbc', models.DecimalField(
                    blank=True, decimal_places=2,
                    help_text='Reticulocytes (% of RBC)', max_digits=4,
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0),
                        django.core.validators.MaxValueValidator(50.0)],
                    verbose_name='RTC (% of RBC)')),
                ('tct', models.SmallIntegerField(
                    blank=True,
                    help_text='Activated Partial Thromboplastin Time (s)',
                    null=True,
                    validators=[
                        django.core.validators.MinValueValidator(5),
                        django.core.validators.MaxValueValidator(50)],
                    verbose_name='TCT (s)')),
                ('vsy', models.DecimalField(
                    blank=True, decimal_places=2, help_text='Viscosity (cP)',
                    max_digits=3, null=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.1),
                        django.core.validators.MaxValueValidator(4)],
                    verbose_name='VSY (cP)')),
            ],
            options={
                'verbose_name': 'Data',
                'verbose_name_plural': 'Data',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop
        ),
        migrations.AddField(
            model_name='data',
            name='is_finished',
            field=models.BooleanField(
                default=False,
                help_text=(
                    'Is the record finished or complete? All data has '
                    'been recorded and the internal identifier has been '
                    'removed.'),
                verbose_name='Is Finished?'),
        ),
        migrations.AddField(
            model_name='data',
            name='chtuid',
            field=models.CharField(blank=True, default='cHT00', max_length=5,
                                   verbose_name='Covid-HT Unique IDentifier'),
        ),
        migrations.AlterField(
            model_name='data',
            name='is_covid19',
            field=models.BooleanField(blank=True, null=True,
                                      verbose_name='Is COVID19?'),
        ),
        migrations.AlterField(
            model_name='data',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4),
        ),
        migrations.RenameField(
            model_name='data',
            old_name='mnl_Upercentace_Rwbc',
            new_name='mnl_Upercentage_Rwbc',
        ),
        migrations.AlterField(
            model_name='data',
            name='id',
            field=models.BigAutoField(
                auto_created=True, primary_key=True,
                serialize=False, verbose_name='ID'),
        ),
    ]
